<?php
require_once 'env.php';
ini_set('display_errors', true);

function connect()
{
  $host = DB_HOST;
  $db = DB_NAME;
  $user = DB_USER;
  $pass = DB_PASS;
  $dsn = "mysql:dbname=$db;host=$host;";
  try {
    $pdo = new PDO($dsn, $user, $pass, [
      PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
      // エラーモード設定
      PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
      // フェッチモード（配列をキーとバリューで必ず返す）
      // オプション
    ]);
    return $pdo;
  } catch(PDOException $e) {
    echo '接続失敗です' . $e->getMessage();
    exit();
  }
}


// ユーザ登録機能作成の流れ
// 1.フォームからデータを渡す
// 2.受け取ってバリデーション
// 3.ユーザ情報を登録


// ①ユーザ登録フォームの作成
// ②登録完了画面の作成
// ③バリデーションの作成
// ④ユーザ登録ロジックの作成
// ⑤ユーザ登録機能の実装

// ログイン機能作成の流れ
// 1.emailとpasswordを受け取る
// 2.emailと一致するユーザ検索
// 3.passwordと一致するユーザを検索
// 4.ユーザ情報をセッションに格納
//session_start()
//->CookieにセッションIDを入れる
//->セッションファイルが生成される
//->セッションファイルに自由に値を保存可能
//$_SESSION
//->セッションへデータを連想配列で保存
//セッションハイジャック
//セッションIDを盗まれてなりすましをされてしまうこと。
//->ログイン後にセッションIDを再作成する。


//①ログインフォームの作成
//②バリデーションの作成
//③セッションでバリデーションメッセージを出す。
//④ログイン機能作成
//⑤セキュリティについて

//CSRF対策　偽造されたリクエストが実行されてしまう脆弱性
//->ワンタイムトークンを利用する。

//XSS対策 不正なスクリプトが実行される脆弱性
//->エスケープ処理

//二重送信 データを登録するときなどに送信ボタンを連打され多重送信されてしまう。登録中の画面で何度もリロードされて多重でリクエストが送られる。登録後にブラウザバックされて登録処理が再度走ってしまう。
//->ワンタイムトークン

//不正ログイン
